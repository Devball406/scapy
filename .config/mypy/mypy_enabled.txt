from scapy.all import sniff, TCP, IP
import ssl
import socket
import datetime

# A simple list of known suspicious domains to flag
SUSPICIOUS_DOMAINS = ["badsite.com", "malicious-server.net"]

# Function to check the TLS certificate of a connection
def check_tls_cert(packet):
    if not (packet.haslayer(TCP) and packet.haslayer(IP)):
        return

    # Check for packets with the SYN, ACK, and PSH flags set
    # This indicates the start of a new connection and data transfer
    if packet[TCP].flags & 0x18:  # SYN-ACK or PSH
        try:
            # We'll use the destination IP and port from the packet
            dst_ip = packet[IP].dst
            dst_port = packet[TCP].dport

            # Create a socket and connect to the server
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(5)
            s.connect((dst_ip, dst_port))

            # Wrap the socket in an SSL context to get the certificate
            ctx = ssl.create_default_context()
            with ctx.wrap_socket(s, server_hostname=dst_ip) as ssock:
                cert = ssock.getpeercert()

            # Analyze the certificate details
            print(f"\n[+] Analyzing certificate for {dst_ip}:{dst_port}")
            
            # Check for suspicious domain names
            subject = dict(cert['subject'])
            common_name = subject.get('commonName', ['Unknown'])[0]
            if common_name in SUSPICIOUS_DOMAINS:
                print(f"ðŸš¨ ALERT: Suspicious domain detected: {common_name}")
            
            # Check certificate expiration
            not_after_str = cert.get('notAfter')
            if not_after_str:
                not_after_date = datetime.datetime.strptime(not_after_str, '%b %d %H:%M:%S %Y %Z')
                if datetime.datetime.now() > not_after_date:
                    print(f"ðŸš¨ ALERT: Certificate for {common_name} is EXPIRED!")

            print(f"  - Subject: {subject}")
            print(f"  - Issuer: {dict(cert['issuer'])}")
            print(f"  - Valid from: {cert.get('notBefore')}")
            print(f"  - Valid until: {cert.get('notAfter')}")
            print(f"  - Serial Number: {cert.get('serialNumber')}")
            print("-" * 50)
        except Exception as e:
            # Handle cases where we can't get the certificate (e.g., non-TLS traffic)
            # You can uncomment the line below to see all errors
            # print(f"[-] Could not get certificate: {e}")
            pass

# Start sniffing network packets on the default interface
print("Starting network traffic analysis...")
print("Press ðŸ’  to stop.")
sniff(prn=check_tls_cert, store=0)
